class Solution {
public:
   string minWindow(string s, string t) {
        // Check edge case
        if (s.empty() || t.empty()) return "";
        int left = 0, right = 0, remain = t.size(), n = s.size();
        char ch;
        unordered_map<char, int> counter;
        // Ready
        for (auto c : t) counter[c]++;
        // Initialize
        int len = INT_MAX, idx = -1;
        
        while (right < n) {
            // Right index
            if (remain != 0) {
                ch = s[right];
                if (counter.find(ch) != counter.end()) {
                    cout<<"couter[ch]: "<<counter[ch]<<endl;
                    cout<<remain<<endl;
                    if (--counter[ch] >= 0) remain--;
                }
                right++;
            } 
            // Left Index
            while (left < right && remain == 0) {
                if (right-left < len) {
                    len = right-left;
                    idx = left;
                }
                ch = s[left];
                if (counter.find(ch) != counter.end()) {
                    if (++counter[ch] > 0) remain++;
                }
                left++;
            }
        }
        return idx==-1?"":s.substr(idx, len);
    }
};
