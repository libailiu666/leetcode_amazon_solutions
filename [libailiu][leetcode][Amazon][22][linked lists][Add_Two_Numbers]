/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        int i=0;
        int sum=0;
        int carry = 0;
        ListNode *s = new ListNode(0);// this node isn't considered in the end.
        ListNode *head = s; // store the head of the sum list.
        while(l1 != NULL || l2!= NULL)
        {
            int x = (l1!=NULL)?l1->val:0;
            int y = (l2!=NULL)?l2->val:0;
            sum = x + y + carry;// carry is used to store the value more than ten from previous step
            carry = sum / 10;
            ListNode* node = new ListNode(sum%10);//node is the sum value of current position
            s->next = node;
            s = node;
            if (l1 != NULL) l1 = l1->next;
            if (l2 != NULL) l2 = l2->next;
        }
        if(carry>0)
            s->next = new ListNode(carry);
        return head->next; // we retrun from the next node. so the first node is ignored.
        }
};
